# -*- coding: utf-8 -*-
"""exc-base-funcao.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o2_aCaj5dTscMV1uyIguHuDRvGcXrjlC
"""

num = int(input('Digite um número para taboada: '))

def titulo():
  print('-' * 15)
  print(f'Taboada do {num}'.center(13))
  print('-' * 15)

def taboada(n):
  for i in range(10):
    print(f'{i:>2} x {n:>2} = {n*i:>2}')

titulo()
taboada(5)

def imprime(n):
  for i in range(1, n+1):
    print(f'{i}'*i)

imprime(5)

def imprime(n):
  string = ''
  for i in range(n):
    string += str(i + 1) + ' '
    print(string)

imprime(10)

def segundos(t):
  s = t % 60
  m = t // 60
  h = m // 60
  m %= 60
  return h, m, s

horario = segundos(4814)

print(f'{horario[0]} hora(s) {horario[1]} minutos(s) {horario[2]} segundo(s)')

def naturais(n): return int(n) == n and n > 0 and n % 2 == 1 or n == 2

naturais(7)

def retorna_natural(n): return len(str(n)) if n > 0 and int(n) == n else None

retorna_natural(2131)

def todas_iguais(sequencia): return True if len(set(sequencia)) == 1 else False

todas_iguais([1, 1, 1])

def todas_diferentes(sequencia): return len(set(sequencia)) == len(sequencia)

todas_diferentes([1, 2, 3, 4, 5])

def indice_elementos(n, lista): return lista.index(n) if n in lista else -1

indice_elementos(11, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

def potencia(n):
  x = 2
  c = 1
  while x < n:
    x = 2 ** c
    c += 1
  return x

potencia(6)

# def fatores(n):
#  n // 23
# fatores(36)

def maiorN(lista, N):
  lista.sort()
  return lista[-N]

maiorN([5, -1, 7, 0, -3, 9], 2)

def div(m, n):
  if m < n:
    return 0
  return 1 + div(m-n, n)

div(7, 2)

def imc(peso, altura): return peso / (altura ** 2)
def classificacao(classificacao):
  if classificacao < 18.5: return 'Magreza'
  if classificacao >= 18.5 and classificacao < 25: return 'Normal'
  if classificacao >= 25 and classificacao < 30: return 'Normal'
  if classificacao >= 30 and classificacao < 40: return 'Obesidade'
  if classificacao >= 40: return 'Obesidade Grave'

calculo = imc(59, 1.64)
classe = classificacao(calculo)

print(f'IMC: {calculo:.1f}')
print(f'Classificação: {classe}')

def raiz(N):
  if N == 0 or N == 1: return N
  if N < 0: N = -N
  x = 1
  while abs(x*x - N) > 1e-9:
    x = 1/2 * (x + N/x)
  return x

raiz(9)

def decompor(N):
  lista = []
  contador = 2
  while N > 1:
    if N % contador == 0:
      lista.append(contador)
      N //= contador
    else:
      contador += 1
  return lista

decompor(36)