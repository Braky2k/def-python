# -*- coding: utf-8 -*-
"""ex-def.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GUH494qqSssGwTnoAMZKwsF_QMMFEava
"""

def saudacao(nome):
  print('Olá', nome)

nome = input('Digite o nome: ')
saudacao(nome.title())

def alterna(n):
  mult = -1             #Multiplicador
  fat = -1              #Fator
  for i in range(n+1):
    num = fat * i       #Variável recebe fator vezes o contador
    fat *= mult         #Fator vezes o multplicador
    print(num, end=' ') #Imprime o número

alterna(5)
print()
alterna(9)
print()
alterna(12)

def perimetro_retangulo(a, b):
  perimetro = 2 * a + 2 * b
  return perimetro

perimetro_retangulo(2, 3)

def saudacao(nome, mensagem):
	print('Olá', nome, '\b!', mensagem)

# Chamada da função com parâmetros posicionais
saudacao("João", "Como você está?")

# Chamada da função com parâmetros nomeados
saudacao(mensagem="Tudo bem?", nome="Maria")

def soma_pn(valores):
  soma_p = 0    # soma dos números positivos
  soma_n = 0    # soma dos números negativos
  for n in valores:
    if n > 0:
      soma_p += n
    else:
      soma_n += n
  return soma_p, soma_n


valores = [2, -1, 3, -4]
soma_p, soma_n = soma_pn(valores)
print(f'Soma dos POSITIVOS = {soma_p}\nSoma dos NEGATIVOS = {soma_n} ')

# Implemente a função somas(lista) que recebe uma lista de números e retorna a soma dos números e a soma dos números ao quadrado.

def somas(lista):
  soma = 0                    #Variável Soma 1 recebe 0.
  soma2 = 0                   #Variável Soma 2 recebe 0.
  for i in lista:
    soma += i                 #Variável soma recebe adição do contador.
  for x in lista:
    quadrado = x ** 2         #Variável quadrado recebe o contador elevado a 2.
    soma2 += quadrado         #Variável soma2 recebe a adição do contador elevado a 2.
  return soma, soma2          #Retorna os valores.
valores = [2, -1, 3, -4]
soma, soma2 = somas(valores)  #Retorna o primeiro valor para soma, e o segundo valor para soma2.

print(f'Soma: {soma}\nSoma2: {soma2}')

# CALCULADORA

#Exibindo menu:
def exibir_menu():
  print('-' * 20)
  print('Escolha uma opção:')
  print('-' * 20)
  print('[ 1 ] Soma\n[ 2 ] Subtração\n[ 3 ] Multiplicação\n[ 4 ] Divisão\n[ 5 ] Potênciação\n[ 6 ] Desligar')

def calculadora():
  #Laço de Repetição
  while True:
    #Executa a função exibir_menu
    exibir_menu()
    print('=' * 27)
    opcao = int(input('Digite a operação desejada: '))
    #Enquanto o número não estar dentro da lista.
    while opcao < 1 or opcao > 6: opcao = int(input('Opção Inválida! Por favor, escolha uma opção válida: '))
    #Finalizando o código
    if opcao == 6: break
    #Inputando os dois valores
    valor1 = float(input('Digite o primeiro valor: '))
    valor2 = float(input('Digite o segundo valor: '))
    #Usando o método Match (Caso a resposta seja [case] -> o número x, execute:)
    match opcao:
      case 1: res = soma(valor1, valor2)
      case 2: res = subtracao(valor1, valor2)
      case 3: res = multiplicacao(valor1, valor2)
      case 4: res = divisao(valor1, valor2)
      case 5: res = potencia(valor1, valor2)
    print('-' * 27)
    #Retornando o valor
    print(f'Valor: {res}')

#Função SOMA
def soma(a, b):
  return a + b

#Função SUBTRAÇÃO
def subtracao(a, b):
  return a - b

#Função MULTIPLICAÇÃO
def multiplicacao(a, b):
  return a * b

#Função DIVISÃO
def divisao(a, b):
  return a / b if b != 0 else None

#Função POTENCIA
def potencia(a, b):
  return a**b

calculadora()   #EXECUTANDO O CÓDIGO.

def firstDigt(digitos):
  # Variável para receber a soma dos digitos.
  soma_produtos = 0
  for contador in range(9):
    # Todos os digitos irão se multiplicar com o contador em sua ordem.
    soma_produtos += (digitos[contador] * (10-contador))
  # Fórmula citada no PDF
  digito_um = ((soma_produtos * 10) % 11) % 10
  # Retorna um valor caso o cálculo seja o mesmo número do PENÚLTIMO número.
  return digito_um == digitos[-2]

def secondDigt(digitos):
  # Variável para receber a soma dos digitos.
  soma_produtos = 0
  for contador in range(10):
    # Todos os digitos irão se multiplicar com o contador em sua ordem.
    soma_produtos += (digitos[contador] * (11-contador))
  # Fórmula citada no PDF
  digito_dois = ((soma_produtos * 10) % 11) % 10
  # Retorna um valor caso o cálculo seja o mesmo número do ÚLTIMO número.
  return digito_dois == digitos[-1]

def validar_cpf(cpf):
  if len(cpf) < 11: return False
  else:
    # Tente adicionar os números na lista DIGITOS
    try: digitos = [int(c) for c in cpf]
    # Se houver um erro (uma string dentro do cpf) imprima CPF inválido.
    except: return False
    # Se tudo acontecer normalmente:
    else:
      if len(set(cpf)) == 1: return False
      if firstDigt(digitos): return True
      else: return False
      if secondDigt(digitos): return True
      else: return False

def main():
  # Digitar o CPF
  cpf = input('Digite o CPF (apenas números): ').strip()


  # Validação com a função validar_cpf
  if validar_cpf(cpf): print('CPF válido!')
  else: print('CPF inválido')

main()

def firstDigt(digitos):
  soma_produtos = 0
  for contador in range(9): soma_produtos += (digitos[contador] * (10-contador))
  digito_um = ((soma_produtos * 10) % 11) % 10
  return digito_um

def secondDigt(digitos):
  soma_produtos = 0
  for contador in range(10): soma_produtos += (digitos[contador] * (11-contador))
  digito_dois = ((soma_produtos * 10) % 11) % 10
  return digito_dois

def validar_cpf(cpf):
  try: digitos = [int(c) for c in cpf]
  except: return False
  else:
    if len(set(cpf)) == 1: return False
    x = firstDigt(digitos)
    digitos.append(x)
    y = secondDigt(digitos)
    return x, y

def main():
  cpf = input('Digite o CPF (apenas números): ').strip()
  n1, n2 =  validar_cpf(cpf)
  if validar_cpf(cpf): print(f'Os últimos números do CPF é: {n1} e {n2}')

main()